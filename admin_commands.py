import logging
from aiogram.dispatcher.filters import Filter
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher, types
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from bookstack_integration import clear_template_cache

import config
from imports import (
    ProjectImporter, UserImporter, OptionImporter,
    PaymentImporter, PurchaseImporter, BonusImporter, ConfigImporter, import_all
)
from templates import MessageTemplates
from google_services import get_google_services
from sqlalchemy import func
from database import Payment, Notification, User
from init import Session

logger = logging.getLogger(__name__)


class AdminFilter(Filter):
    key = 'is_admin'  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω key –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞

    async def check(self, message: types.Message) -> bool:
        return message.from_user.id in config.ADMINS


class AdminCommandsMiddleware(BaseMiddleware):
    def __init__(self, admin_commands_instance):
        super().__init__()
        self.admin_commands_instance = admin_commands_instance

    async def on_process_message(self, message: types.Message, data: dict):
        if message.from_user.id in config.ADMINS and message.text and message.text.startswith('&'):

            state = data['state']
            current_state = await state.get_state()

            if current_state:
                logger.info(f"–°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state} –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                await state.finish()

            await self.admin_commands_instance.handle_admin_command(message, state)

            raise CancelHandler()


class AdminCommands:
    def __init__(self, dp):
        self.dp = dp
        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        self.dp.register_message_handler(
            self.handle_admin_command,
            AdminFilter(),
            lambda msg: msg.text and msg.text.startswith('&'),
            state='*'
        )

    async def _import_sheet(self, message: types.Message, importer_class, sheet_name: str):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        reply = None
        try:
            reply = await message.reply(f"–ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç {sheet_name}...")

            sheets_client, _ = get_google_services()
            sheet = sheets_client.open_by_key(config.GOOGLE_SHEET_ID).worksheet(sheet_name)

            importer = importer_class()
            stats = await importer.import_sheet(sheet)

            report = (
                f"‚úÖ –ò–º–ø–æ—Ä—Ç {sheet_name} –∑–∞–≤–µ—Ä—à–µ–Ω:\n"
                f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats.total}\n"
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats.updated}\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {stats.added}\n"
                f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.skipped}\n"
                f"–û—à–∏–±–æ–∫: {stats.errors}"
            )

            if stats.error_rows:
                report += "\n\n–û—à–∏–±–∫–∏:\n" + "\n".join(
                    f"–°—Ç—Ä–æ–∫–∞ {row}: {error}" for row, error in stats.error_rows
                )

            await reply.edit_text(report)

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {sheet_name}: {str(e)}"
            logger.error(error_msg, exc_info=True)

            if reply:
                await reply.edit_text(error_msg)
            else:
                await message.reply(error_msg)

    async def handle_upconfig(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã &upconfig –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Google Sheets"""
        try:
            reply = await message.reply("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Google Sheets...")
            config_dict = await ConfigImporter.import_config()

            if not config_dict:
                await reply.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –ª–∏—Å—Ç Config –ø—É—Å—Ç.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –º–æ–¥—É–ª–µ config
            ConfigImporter.update_config_module(config_dict)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ GlobalVariables
            from variables import GlobalVariables

            variables_to_update = {
                'PURCHASE_BONUSES': 'purchase_bonuses',
                'STRATEGY_COEFFICIENTS': 'strategy_coefficients',
                'TRANSFER_BONUS': 'transfer_bonus',
                'SOCIAL_LINKS': 'social_links',
                'FAQ_URL': 'faq_url',
                'REQUIRED_CHANNELS': 'required_channels',
                'PROJECT_DOCUMENTS': 'project_documents'
            }

            global_vars = GlobalVariables()
            for config_name, var_name in variables_to_update.items():
                if config_name in config_dict:
                    global_vars.set_static_variable(var_name, config_dict[config_name])

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            config_items = []
            for key, value in config_dict.items():
                if isinstance(value, dict) or isinstance(value, list):
                    value_str = f"<—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ({type(value).__name__})>"
                else:
                    value_str = str(value)
                    if len(value_str) > 50:
                        value_str = value_str[:47] + "..."
                config_items.append(f"‚Ä¢ {key}: {value_str}")

            config_text = "\n".join(config_items)
            await reply.edit_text(
                f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n{config_text}"
            )
            logger.info(f"Configuration updated by admin {message.from_user.id}")

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await message.reply(error_msg)

    async def handle_testmail(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã &testmail –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email"""
        try:
            reply = await message.reply("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Postmark...")

            from email_sender import email_manager

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            connected = await email_manager.test_connection()
            if not connected:
                await reply.edit_text("‚ùå –ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Postmark. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ POSTMARK_API_TOKEN")
                return

            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å–∞–º–æ–º—É –∞–¥–º–∏–Ω—É
            with Session() as session:
                user = session.query(User).filter_by(telegramID=message.from_user.id).first()
                if not user or not user.email:
                    await reply.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω email. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /fill_user_data")
                    return

                # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º email_manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—à–∏–±–∫–∏
                try:
                    success = await email_manager.send_notification_email(
                        to=user.email,
                        subject="Talentir Test Email",
                        body="<h1>–¢–µ—Å—Ç Postmark</h1><p>–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ - email —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>"
                    )

                    if success:
                        await reply.edit_text(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user.email}")
                    else:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –∏–∑ –ª–æ–≥–æ–≤ –∏–ª–∏ –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                        error_details = await self._get_postmark_error_details(user.email)
                        await reply.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {user.email}\n\n{error_details}")

                except Exception as send_error:
                    await reply.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {user.email}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(send_error)}")

        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"Error in testmail command: {e}", exc_info=True)

    async def _get_postmark_error_details(self, email: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ Postmark"""
        try:
            from email_sender import email_manager

            # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–∏
            import aiohttp

            data = {
                "From": f"{config.EMAIL_FROM_NAME} <{config.EMAIL_FROM}>",
                "To": email,
                "Subject": "Test",
                "HtmlBody": "<p>Test</p>",
                "MessageStream": "outbound"
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(
                        f"{email_manager.provider.base_url}/email",
                        headers=email_manager.provider.headers,
                        json=data
                ) as response:
                    response_data = await response.json()

                    if response.status != 200:
                        error_code = response_data.get('ErrorCode', 'Unknown')
                        error_message = response_data.get('Message', 'Unknown error')

                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫
                        if error_code == 412:
                            return f"üîí –ê–∫–∫–∞—É–Ω—Ç Postmark –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n\n–û—à–∏–±–∫–∞ {error_code}: {error_message}\n\nüí° –†–µ—à–µ–Ω–∏–µ: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ –ø–∞–Ω–µ–ª–∏ Postmark –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ email –Ω–∞ –¥–æ–º–µ–Ω–µ talentir.info"
                        elif error_code == 422:
                            return f"üìß –î–æ–º–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω\n\n–û—à–∏–±–∫–∞ {error_code}: {error_message}\n\nüí° –†–µ—à–µ–Ω–∏–µ: –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –¥–æ–º–µ–Ω talentir.info –≤ Postmark"
                        elif error_code == 10:
                            return f"üîë –ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω\n\n–û—à–∏–±–∫–∞ {error_code}: {error_message}\n\nüí° –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ POSTMARK_API_TOKEN –≤ .env"
                        else:
                            return f"‚ùå –û—à–∏–±–∫–∞ {error_code}: {error_message}"

                    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"

        except Exception as e:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {str(e)}"

    async def handle_admin_command(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""

        current_state = await state.get_state()
        if current_state:
            await state.finish()
            logger.info(f"–°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state} –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

        command = message.text[1:].strip().lower()
        logger.info(f"Processing admin command: {command}")

        if command == "upall":
            try:
                reply = await message.reply("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é import_all
                results = await import_all(self.dp.bot)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                report = []
                for sheet_name, stats in results.items():
                    if isinstance(stats, str):  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                        report.append(f"\n‚ùå {sheet_name}: {stats}")
                    else:
                        report.append(f"\nüìä {sheet_name}:")
                        report.append(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats.total}")
                        report.append(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats.updated}")
                        report.append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {stats.added}")
                        report.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.skipped}")
                        report.append(f"–û—à–∏–±–æ–∫: {stats.errors}")

                        if stats.error_rows:
                            report.append("–û—à–∏–±–∫–∏:")
                            for row, error in stats.error_rows:
                                report.append(f"‚Ä¢ –°—Ç—Ä–æ–∫–∞ {row}: {error}")

                await reply.edit_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n" + "\n".join(report))

            except Exception as e:
                error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await message.reply(error_msg)

        elif command == "upuser":
            await self._import_sheet(message, UserImporter, "Users")

        elif command == "upconfig":
            await self.handle_upconfig(message)

        elif command == "upro":
            try:
                clear_template_cache()
                logger.info("BookStack template cache cleared")
                await self._import_sheet(message, ProjectImporter, "Projects")
                await self._import_sheet(message, OptionImporter, "Options")
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await message.reply(error_msg)

        elif command == "ut":
            try:
                reply = await message.reply("üîÑ –û–±–Ω–æ–≤–ª—è—é —à–∞–±–ª–æ–Ω—ã...")
                await MessageTemplates.load_templates()
                await reply.edit_text("‚úÖ –®–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await message.reply(error_msg)

        elif command == "testmail":
            await self.handle_testmail(message)

        elif command == "check":
            try:
                reply = await message.reply("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–ª–∞—Ç–µ–∂–∏...")

                with Session() as session:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                    pending_payments = session.query(Payment).filter_by(status="check").all()

                    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                    total_amount = session.query(func.sum(Payment.amount)).filter_by(status="check").scalar() or 0

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö
                    if pending_payments:
                        report = f"üí∞ –í —Å–∏—Å—Ç–µ–º–µ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ {len(pending_payments)} –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ —Å—É–º–º—É ${total_amount:.2f}"

                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                        for payment in pending_payments:
                            existing_notifications = (
                                session.query(Notification)
                                    .filter(
                                    Notification.source == "payment_checker",
                                    Notification.text.like(f"%payment_id: {payment.paymentID}%")
                                )
                                    .all()
                            )

                            for notif in existing_notifications:
                                session.delete(notif)

                        session.commit()

                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                        notifications_created = 0
                        for payment in pending_payments:
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                            payer = session.query(User).filter_by(userID=payment.userID).first()
                            if not payer:
                                continue

                            try:
                                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                                # –í–∞–∂–Ω–æ: —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                                from main import create_payment_check_notification
                                await create_payment_check_notification(payment, payer)
                                notifications_created += 1
                            except Exception as e:
                                logger.error(f"Error creating notification for payment {payment.paymentID}: {e}",
                                             exc_info=True)

                        report += f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {notifications_created} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
                        await reply.edit_text(report)
                    else:
                        await reply.edit_text("‚úÖ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ—Ç")

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await message.reply(error_msg)

        else:
            await message.reply(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: &{command}")


def setup_admin_commands(dp):
    dp.filters_factory.bind(AdminFilter)
    admin_commands = AdminCommands(dp)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    admin_middleware = AdminCommandsMiddleware(admin_commands)
    dp.middleware.setup(admin_middleware)

    logger.info("Admin commands initialized with middleware")
import logging
import asyncio
from aiogram.dispatcher.filters import Filter
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher, types
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from bookstack_integration import clear_template_cache

import config
from imports import (
    ProjectImporter, UserImporter, OptionImporter,
    PaymentImporter, PurchaseImporter, BonusImporter, ConfigImporter, import_all
)

from database import Option, Notification, User, Bonus, Project, Purchase, ActiveBalance, PassiveBalance
from bonus_processor import process_purchase_with_bonuses
from templates import MessageTemplates
from google_services import get_google_services
from sqlalchemy import func
from database import Payment, Notification, User
from init import Session
from datetime import datetime

logger = logging.getLogger(__name__)


class AdminFilter(Filter):
    key = 'is_admin'  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω key –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞

    async def check(self, message: types.Message) -> bool:
        return message.from_user.id in config.ADMINS


class AdminCommandsMiddleware(BaseMiddleware):
    def __init__(self, admin_commands_instance):
        super().__init__()
        self.admin_commands_instance = admin_commands_instance

    async def on_process_message(self, message: types.Message, data: dict):
        if message.from_user.id in config.ADMINS and message.text and message.text.startswith('&'):

            state = data['state']
            current_state = await state.get_state()

            if current_state:
                logger.info(f"–°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state} –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                await state.finish()

            await self.admin_commands_instance.handle_admin_command(message, state)

            raise CancelHandler()


class AdminCommands:
    def __init__(self, dp):
        self.dp = dp
        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        self.dp.register_message_handler(
            self.handle_admin_command,
            AdminFilter(),
            lambda msg: msg.text and msg.text.startswith('&'),
            state='*'
        )

    async def _import_sheet(self, message: types.Message, importer_class, sheet_name: str):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        reply = None
        try:
            reply = await message.reply(f"–ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç {sheet_name}...")

            sheets_client, _ = get_google_services()
            sheet = sheets_client.open_by_key(config.GOOGLE_SHEET_ID).worksheet(sheet_name)

            importer = importer_class()
            stats = await importer.import_sheet(sheet)

            report = (
                f"‚úÖ –ò–º–ø–æ—Ä—Ç {sheet_name} –∑–∞–≤–µ—Ä—à–µ–Ω:\n"
                f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats.total}\n"
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats.updated}\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {stats.added}\n"
                f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.skipped}\n"
                f"–û—à–∏–±–æ–∫: {stats.errors}"
            )

            if stats.error_rows:
                report += "\n\n–û—à–∏–±–∫–∏:\n" + "\n".join(
                    f"–°—Ç—Ä–æ–∫–∞ {row}: {error}" for row, error in stats.error_rows
                )

            await reply.edit_text(report)

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {sheet_name}: {str(e)}"
            logger.error(error_msg, exc_info=True)

            if reply:
                await reply.edit_text(error_msg)
            else:
                await message.reply(error_msg)

    async def handle_clearprojects(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ &clearprojects - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∏–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        reply = await message.reply("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –û—á–∏—â–∞—é —Ç–∞–±–ª–∏—Ü—É projects...")

        try:
            with Session() as session:
                # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
                session.execute("PRAGMA foreign_keys = OFF")

                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
                session.query(Project).delete()
                session.commit()

                # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—Ä–∞—Ç–Ω–æ
                session.execute("PRAGMA foreign_keys = ON")

                await reply.edit_text("‚úÖ –¢–∞–±–ª–∏—Ü–∞ projects –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç...")

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                sheets_client, _ = get_google_services()
                sheet = sheets_client.open_by_key(config.GOOGLE_SHEET_ID).worksheet("Projects")

                importer = ProjectImporter()
                stats = await importer.import_sheet(sheet)

                report = (
                    f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:\n"
                    f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats.total}\n"
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {stats.added}\n"
                    f"–û—à–∏–±–æ–∫: {stats.errors}"
                )

                await reply.edit_text(report)

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await reply.edit_text(error_msg)

    async def handle_upconfig(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã &upconfig –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Google Sheets"""
        try:
            reply = await message.reply("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Google Sheets...")
            config_dict = await ConfigImporter.import_config()

            if not config_dict:
                await reply.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –ª–∏—Å—Ç Config –ø—É—Å—Ç.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –º–æ–¥—É–ª–µ config
            ConfigImporter.update_config_module(config_dict)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ GlobalVariables
            from variables import GlobalVariables

            variables_to_update = {
                'PURCHASE_BONUSES': 'purchase_bonuses',
                'STRATEGY_COEFFICIENTS': 'strategy_coefficients',
                'TRANSFER_BONUS': 'transfer_bonus',
                'SOCIAL_LINKS': 'social_links',
                'FAQ_URL': 'faq_url',
                'REQUIRED_CHANNELS': 'required_channels',
                'PROJECT_DOCUMENTS': 'project_documents'
            }

            global_vars = GlobalVariables()
            for config_name, var_name in variables_to_update.items():
                if config_name in config_dict:
                    global_vars.set_static_variable(var_name, config_dict[config_name])

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            config_items = []
            for key, value in config_dict.items():
                if isinstance(value, dict) or isinstance(value, list):
                    value_str = f"<—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ({type(value).__name__})>"
                else:
                    value_str = str(value)
                    if len(value_str) > 50:
                        value_str = value_str[:47] + "..."
                config_items.append(f"‚Ä¢ {key}: {value_str}")

            config_text = "\n".join(config_items)
            await reply.edit_text(
                f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n{config_text}"
            )
            logger.info(f"Configuration updated by admin {message.from_user.id}")

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await message.reply(error_msg)

    async def handle_testmail(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ &testmail - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email —Å–∏—Å—Ç–µ–º—ã"""
        try:
            reply = await message.reply("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º email —Å–∏—Å—Ç–µ–º—É...")

            # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            command_parts = message.text.split(maxsplit=1)
            custom_email = None

            if len(command_parts) > 1:
                custom_email = command_parts[1].strip()
                import re
                if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', custom_email):
                    await reply.edit_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: {custom_email}")
                    return

            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            smtp_config = {
                'host': getattr(config, 'SMTP_HOST', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'),
                'port': getattr(config, 'SMTP_PORT', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'),
                'user': getattr(config, 'SMTP_USER', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'),
                'password': '***' if hasattr(config, 'SMTP_PASSWORD') and config.SMTP_PASSWORD else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
            }

            config_text = "\n".join([f"‚Ä¢ {k}: {v}" for k, v in smtp_config.items()])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' in smtp_config.values() or smtp_config['password'] == '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω':
                await reply.edit_text(
                    f"‚ùå SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                    f"üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n{config_text}\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª:\n"
                    f"‚Ä¢ SMTP_HOST\n"
                    f"‚Ä¢ SMTP_PORT\n"
                    f"‚Ä¢ SMTP_USER\n"
                    f"‚Ä¢ SMTP_PASSWORD"
                )
                return

            await reply.edit_text(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP:\n{config_text}\n\n"
                                  f"üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

            # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            import aiosmtplib

            try:
                smtp = aiosmtplib.SMTP(
                    hostname=config.SMTP_HOST,
                    port=config.SMTP_PORT,
                    timeout=10
                )

                await smtp.connect()
                await reply.edit_text(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP:\n{config_text}\n\n"
                                      f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n"
                                      f"üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...")

                # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                try:
                    await smtp.starttls()
                except Exception as e:
                    if "already using TLS" not in str(e):
                        raise

                await smtp.login(config.SMTP_USER, config.SMTP_PASSWORD)
                await smtp.quit()

                await reply.edit_text(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP:\n{config_text}\n\n"
                                      f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
                                      f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\n\n"
                                      f"üìß –ü—Ä–æ–≤–µ—Ä—è–µ–º EmailManager...")

            except asyncio.TimeoutError:
                await reply.edit_text(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP:\n{config_text}\n\n"
                                      f"‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {config.SMTP_HOST}:{config.SMTP_PORT}\n\n"
                                      f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                                      f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç –∏–ª–∏ –ø–æ—Ä—Ç\n"
                                      f"‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–µ—Ä–≤–æ–ª–æ–º\n"
                                      f"‚Ä¢ SMTP —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return

            except aiosmtplib.SMTPAuthenticationError as e:
                await reply.edit_text(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP:\n{config_text}\n\n"
                                      f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
                                      f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n{str(e)}\n\n"
                                      f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                                      f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è\n"
                                      f"‚Ä¢ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {config.SMTP_USER}")
                return

            except Exception as e:
                await reply.edit_text(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP:\n{config_text}\n\n"
                                      f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
                return

            # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ EmailManager
            from email_sender import email_manager

            if not email_manager.providers:
                await reply.edit_text(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP:\n{config_text}\n\n"
                                      f"‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n"
                                      f"‚ùå EmailManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!\n"
                                      f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            providers_status = await email_manager.get_providers_status()

            status_text = []
            for provider_name, is_working in providers_status.items():
                status_text.append(f"{'‚úÖ' if is_working else '‚ùå'} {provider_name}")

            status_report = "\n".join(status_text)

            # 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º target email –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
            with Session() as session:
                if custom_email:
                    target_email = custom_email
                    firstname = "Test User"
                else:
                    user = session.query(User).filter_by(telegramID=message.from_user.id).first()
                    if not user or not user.email:
                        await reply.edit_text(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP:\n{config_text}\n\n"
                                              f"‚úÖ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                                              f"üìä –°—Ç–∞—Ç—É—Å EmailManager:\n{status_report}\n\n"
                                              f"‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç-–ø–∏—Å—å–º–æ!\n"
                                              f"–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω email\n\n"
                                              f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: &testmail email@example.com")
                        return
                    target_email = user.email
                    firstname = user.firstname

                await reply.edit_text(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP:\n{config_text}\n\n"
                                      f"‚úÖ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                                      f"üìä –°—Ç–∞—Ç—É—Å EmailManager:\n{status_report}\n\n"
                                      f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç-–ø–∏—Å—å–º–æ –Ω–∞ {target_email}...")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
                test_html = f"""
                <html>
                <body>
                    <h2>üéâ –¢–µ—Å—Ç email —Å–∏—Å—Ç–µ–º—ã Talentir</h2>
                    <p>–ü—Ä–∏–≤–µ—Ç, <strong>{firstname}</strong>!</p>
                    <p>–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ, –∑–Ω–∞—á–∏—Ç email —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>

                    <hr>

                    <h3>üìä –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞:</h3>
                    <ul>
                        <li><strong>–°–µ—Ä–≤–µ—Ä:</strong> {config.SMTP_HOST}:{config.SMTP_PORT}</li>
                        <li><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {config.SMTP_USER}</li>
                        <li><strong>–í—Ä–µ–º—è:</strong> {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</li>
                        <li><strong>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑:</strong> EmailManager</li>
                    </ul>

                    <hr>
                    <p><small>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ –æ—Ç Talentir Bot</small></p>
                </body>
                </html>
                """

                success = await email_manager.send_notification_email(
                    to=target_email,
                    subject="‚úÖ –¢–µ—Å—Ç Email –°–∏—Å—Ç–µ–º—ã Talentir",
                    body=test_html
                )

                if success:
                    await reply.edit_text(
                        f"üéâ **Email —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç!**\n\n"
                        f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP:\n{config_text}\n\n"
                        f"‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK\n"
                        f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: OK\n"
                        f"‚úÖ EmailManager: OK\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º: OK\n\n"
                        f"üìß –¢–µ—Å—Ç-–ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {target_email}\n"
                        f"üì¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É (–≤–∫–ª—é—á–∞—è –ø–∞–ø–∫—É —Å–ø–∞–º)!"
                    )
                else:
                    await reply.edit_text(
                        f"‚ö†Ô∏è **–ß–∞—Å—Ç–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å**\n\n"
                        f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP:\n{config_text}\n\n"
                        f"‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK\n"
                        f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: OK\n"
                        f"‚ùå EmailManager: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n"
                        f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–∏—Å—å–º–∞\n"
                        f"‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É\n"
                        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: journalctl -u talentir-bot -f"
                    )

        except Exception as e:
            await message.reply(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"Error in testmail command: {e}", exc_info=True)

    async def handle_addtokens(self, message: types.Message):
        """Handler for &addtokens command to manually add shares to user"""
        try:
            # Parse command arguments
            command_text = message.text[1:].strip()  # Remove & and whitespace

            # Expected format: addtokens u:{userID} pj:{projectID} q:{Qty} o:{OptionID} (optional)
            if not command_text.startswith('addtokens'):
                await message.reply("‚ùå Invalid command format")
                return

            # Extract parameters using regex
            import re

            # Parse parameters
            user_match = re.search(r'u:(\d+)', command_text)
            project_match = re.search(r'pj:(\d+)', command_text)
            qty_match = re.search(r'q:(\d+)', command_text)
            option_match = re.search(r'o:(\d+)', command_text)

            if not all([user_match, project_match, qty_match]):
                await message.reply(
                    "‚ùå Invalid command format!\n\n"
                    "Usage: &addtokens u:{userID} pj:{projectID} q:{Qty} o:{OptionID}\n"
                    "       &addtokens u:{userID} pj:{projectID} q:{Qty}\n\n"
                    "Examples:\n"
                    "  &addtokens u:123 pj:42 q:100 o:456\n"
                    "  &addtokens u:123 pj:42 q:100"
                )
                return

            # Extract values
            user_id = int(user_match.group(1))
            project_id = int(project_match.group(1))
            quantity = int(qty_match.group(1))
            option_id = int(option_match.group(1)) if option_match else None

            # Validate parameters
            if quantity <= 0:
                await message.reply("‚ùå Quantity must be positive")
                return

            reply = await message.reply(f"üîÑ Processing manual share addition...")

            with Session() as session:
                # Check if user exists
                target_user = session.query(User).filter_by(userID=user_id).first()
                if not target_user:
                    await reply.edit_text(f"‚ùå User with ID {user_id} not found")
                    return

                # Check if project exists
                project = session.query(Project).filter_by(projectID=project_id).first()
                if not project:
                    await reply.edit_text(f"‚ùå Project with ID {project_id} not found")
                    return

                # Find option
                if option_id:
                    # Use specified option
                    option = session.query(Option).filter_by(
                        optionID=option_id,
                        projectID=project_id
                    ).first()

                    if not option:
                        await reply.edit_text(
                            f"‚ùå Option with ID {option_id} not found for project {project_id}"
                        )
                        return

                    # Check if specified quantity matches option or is within reasonable bounds
                    if quantity != option.packQty:
                        await reply.edit_text(
                            f"‚ö†Ô∏è Warning: Specified quantity ({quantity}) differs from option quantity ({option.packQty})\n"
                            f"Proceeding with specified quantity: {quantity}"
                        )

                else:
                    # Find first available option for this project (preferably active)
                    option = session.query(Option).filter_by(
                        projectID=project_id,
                        isActive=True
                    ).order_by(Option.optionID.asc()).first()

                    if not option:
                        # If no active options, try inactive ones
                        option = session.query(Option).filter_by(
                            projectID=project_id
                        ).order_by(Option.optionID.asc()).first()

                    if not option:
                        await reply.edit_text(
                            f"‚ùå No options found for project {project_id}\n"
                            f"Please create an option first or specify option ID"
                        )
                        return

                    # Inform about auto-selected option
                    await reply.edit_text(
                        f"üîÑ Auto-selected option {option.optionID} for project {project_id}\n"
                        f"Option: {option.packQty} shares at ${option.costPerShare:.2f} per share\n"
                        f"Processing {quantity} shares..."
                    )

                # Calculate total price based on option's price per share
                total_price = option.costPerShare * quantity

                # Get admin user for logging
                admin_user = session.query(User).filter_by(telegramID=message.from_user.id).first()
                admin_name = admin_user.firstname if admin_user else "Unknown Admin"

                # Create purchase record using existing option
                purchase = Purchase(
                    userID=user_id,
                    projectID=project_id,
                    projectName=project.projectName,
                    optionID=option.optionID,
                    packQty=quantity,
                    packPrice=total_price,
                    createdAt=datetime.utcnow()
                )

                session.add(purchase)
                session.flush()  # Get the purchase ID

                # Create ActiveBalance record for tracking (no actual balance change)
                balance_record = ActiveBalance(
                    userID=user_id,
                    firstname=target_user.firstname,
                    surname=target_user.surname,
                    amount=0.0,  # No balance change for manual addition
                    status='done',
                    reason=f'manual_addition={purchase.purchaseID}',
                    link='',
                    notes=f'Manual share addition by admin: {admin_name} ({message.from_user.id}). '
                          f'Option: {option.optionID}, Qty: {quantity}, Price: ${total_price:.2f}'
                )
                session.add(balance_record)

                # Create notification for the user
                text, buttons = await MessageTemplates.get_raw_template(
                    'admin_tokens_added_notification',
                    {
                        'firstname': target_user.firstname,
                        'quantity': quantity,
                        'project_name': project.projectName,
                        'price': total_price,
                        'admin_name': admin_name
                    },
                    lang=target_user.lang
                )

                user_notification = Notification(
                    source="admin_command",
                    text=text,
                    buttons=buttons,
                    target_type="user",
                    target_value=str(user_id),
                    priority=2,
                    category="admin",
                    importance="high",
                    parse_mode="HTML"
                )
                session.add(user_notification)

                # Create notification for other admins
                admin_text, admin_buttons = await MessageTemplates.get_raw_template(
                    'admin_tokens_added_admin_notification',
                    {
                        'admin_name': admin_name,
                        'admin_id': message.from_user.id,
                        'user_name': target_user.firstname,
                        'user_id': user_id,
                        'quantity': quantity,
                        'project_name': project.projectName,
                        'price': total_price,
                        'purchase_id': purchase.purchaseID,
                        'option_id': option.optionID
                    }
                )

                # Send to all admins except the one who executed the command
                for admin_id in config.ADMIN_USER_IDS:
                    if admin_id != (admin_user.userID if admin_user else None):
                        admin_notification = Notification(
                            source="admin_command",
                            text=admin_text,
                            buttons=admin_buttons,
                            target_type="user",
                            target_value=str(admin_id),
                            priority=1,
                            category="admin",
                            importance="normal",
                            parse_mode="HTML"
                        )
                        session.add(admin_notification)

                session.commit()

                # NOTE: No referral bonuses for manual admin additions
                # asyncio.create_task(process_purchase_with_bonuses(purchase.purchaseID))

                # Success message
                option_status = "üü¢ Active" if option.isActive else "üî¥ Inactive"
                await reply.edit_text(
                    f"‚úÖ Successfully added shares!\n\n"
                    f"üë§ User: {target_user.firstname} (ID: {user_id})\n"
                    f"üìä Project: {project.projectName} (ID: {project_id})\n"
                    f"üéØ Quantity: {quantity} shares\n"
                    f"üí∞ Total Price: ${total_price:.2f}\n"
                    f"üîß Option: {option.optionID} ({option_status})\n"
                    f"üíµ Price per share: ${option.costPerShare:.2f}\n"
                    f"üÜî Purchase ID: {purchase.purchaseID}\n\n"
                    f"üì¨ User has been notified\n"
                    f"‚ö†Ô∏è No referral bonuses will be processed for manual additions"
                )

                logger.info(f"Manual shares added by admin {message.from_user.id}: "
                            f"User {user_id}, Project {project_id}, Option {option.optionID}, "
                            f"Qty {quantity}, Total ${total_price:.2f}")

        except ValueError as e:
            await message.reply(f"‚ùå Invalid parameter format: {str(e)}")
        except Exception as e:
            logger.error(f"Error in addtokens command: {e}", exc_info=True)
            await message.reply(f"‚ùå Error adding shares: {str(e)}")

    async def handle_delpurchase(self, message: types.Message):
        """Handler for &delpurchase command to safely delete purchase records"""
        try:
            # Parse command arguments
            command_parts = message.text.strip().split()

            if len(command_parts) != 2:
                await message.reply(
                    "‚ùå Invalid command format!\n\n"
                    "Usage: &delpurchase {purchaseID}\n\n"
                    "Example: &delpurchase 123"
                )
                return

            try:
                purchase_id = int(command_parts[1])
            except ValueError:
                await message.reply("‚ùå Purchase ID must be a number")
                return

            reply = await message.reply(f"üîÑ Analyzing purchase {purchase_id}...")

            with Session() as session:
                # First, get purchase details
                purchase = session.query(Purchase).filter_by(purchaseID=purchase_id).first()

                if not purchase:
                    await reply.edit_text(f"‚ùå Purchase {purchase_id} not found")
                    return

                # Get user info
                user = session.query(User).filter_by(userID=purchase.userID).first()
                user_name = user.firstname if user else "Unknown"

                # Check for related records
                related_bonuses = session.query(Bonus).filter_by(purchaseID=purchase_id).all()
                related_active_balance = session.query(ActiveBalance).filter(
                    ActiveBalance.reason.like(f'%purchase={purchase_id}%')
                ).all()
                related_passive_balance = session.query(PassiveBalance).filter(
                    PassiveBalance.reason.like(f'%bonus=%')
                ).join(Bonus).filter(Bonus.purchaseID == purchase_id).all()

                # Show analysis
                analysis = (
                    f"üìä Purchase Analysis:\n\n"
                    f"üÜî Purchase ID: {purchase_id}\n"
                    f"üë§ User: {user_name} (ID: {purchase.userID})\n"
                    f"üìä Project: {purchase.projectName} (ID: {purchase.projectID})\n"
                    f"üéØ Quantity: {purchase.packQty} shares\n"
                    f"üí∞ Price: ${purchase.packPrice:.2f}\n"
                    f"üîß Option: {purchase.optionID}\n"
                    f"üìÖ Date: {purchase.createdAt.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"üîó Related Records:\n"
                    f"‚Ä¢ Bonuses: {len(related_bonuses)}\n"
                    f"‚Ä¢ Active Balance: {len(related_active_balance)}\n"
                    f"‚Ä¢ Passive Balance: {len(related_passive_balance)}\n\n"
                )

                if related_bonuses:
                    total_bonuses = sum(b.bonusAmount for b in related_bonuses)
                    analysis += f"üí∞ Total bonuses paid: ${total_bonuses:.2f}\n"

                analysis += "‚ö†Ô∏è This will permanently delete the purchase and ALL related records!"

                await reply.edit_text(analysis)

                # Wait for confirmation (in real implementation, you'd use FSM or inline keyboard)
                await asyncio.sleep(2)

                confirmation_msg = await message.reply(
                    "‚ö†Ô∏è Are you sure you want to delete this purchase?\n\n"
                    "This action cannot be undone and will:\n"
                    "‚Ä¢ Delete the purchase record\n"
                    "‚Ä¢ Delete all related bonuses\n"
                    "‚Ä¢ Delete related balance records\n"
                    "‚Ä¢ Update user balances\n\n"
                    "Reply with 'CONFIRM DELETE' to proceed"
                )

                # In a real implementation, you'd use FSM here
                # For now, let's implement immediate deletion with admin confirmation

        except Exception as e:
            logger.error(f"Error in delpurchase analysis: {e}", exc_info=True)
            await message.reply(f"‚ùå Error analyzing purchase: {str(e)}")

    async def handle_delpurchase_confirm(self, message: types.Message, purchase_id: int):
        """Actual deletion after confirmation"""
        try:
            reply = await message.reply(f"üîÑ Deleting purchase {purchase_id}...")

            with Session() as session:
                # Get admin user for logging
                admin_user = session.query(User).filter_by(telegramID=message.from_user.id).first()
                admin_name = admin_user.firstname if admin_user else "Unknown Admin"

                # Begin transaction
                session.begin()

                try:
                    # Get purchase details before deletion
                    purchase = session.query(Purchase).filter_by(purchaseID=purchase_id).first()
                    if not purchase:
                        await reply.edit_text(f"‚ùå Purchase {purchase_id} not found")
                        return

                    user = session.query(User).filter_by(userID=purchase.userID).first()

                    # 1. Delete related bonuses and update balances
                    bonuses = session.query(Bonus).filter_by(purchaseID=purchase_id).all()
                    total_bonuses_removed = 0

                    for bonus in bonuses:
                        # Decrease passive balance of bonus recipient
                        bonus_user = session.query(User).filter_by(userID=bonus.userID).first()
                        if bonus_user:
                            bonus_user.balancePassive -= bonus.bonusAmount
                            total_bonuses_removed += bonus.bonusAmount

                            # Create negative passive balance record
                            passive_record = PassiveBalance(
                                userID=bonus_user.userID,
                                firstname=bonus_user.firstname,
                                surname=bonus_user.surname,
                                amount=-bonus.bonusAmount,
                                status='done',
                                reason=f'bonus_removal={bonus.bonusID}',
                                notes=f'Bonus removed due to purchase deletion by admin: {admin_name}'
                            )
                            session.add(passive_record)

                    # Delete bonuses
                    session.query(Bonus).filter_by(purchaseID=purchase_id).delete()

                    # 2. Delete related active balance records
                    active_balance_records = session.query(ActiveBalance).filter(
                        ActiveBalance.reason.like(f'%purchase={purchase_id}%')
                    ).all()

                    balance_adjustment = 0
                    for record in active_balance_records:
                        if record.reason == f'purchase={purchase_id}':
                            # This was the original purchase deduction
                            balance_adjustment = -record.amount  # Restore the balance

                    session.query(ActiveBalance).filter(
                        ActiveBalance.reason.like(f'%purchase={purchase_id}%')
                    ).delete()

                    # 3. Adjust user's active balance if needed
                    if balance_adjustment != 0 and user:
                        user.balanceActive += balance_adjustment

                        # Create balance restoration record
                        restore_record = ActiveBalance(
                            userID=user.userID,
                            firstname=user.firstname,
                            surname=user.surname,
                            amount=balance_adjustment,
                            status='done',
                            reason=f'purchase_deletion={purchase_id}',
                            notes=f'Balance restored due to purchase deletion by admin: {admin_name}'
                        )
                        session.add(restore_record)

                    # 4. Delete the purchase record
                    session.query(Purchase).filter_by(purchaseID=purchase_id).delete()

                    # 5. Create admin log entry
                    admin_log = ActiveBalance(
                        userID=admin_user.userID if admin_user else 0,
                        firstname=admin_name,
                        surname=admin_user.surname if admin_user else '',
                        amount=0.0,
                        status='done',
                        reason=f'admin_deletion={purchase_id}',
                        notes=f'Purchase {purchase_id} deleted by admin. '
                              f'User: {user.firstname} (ID: {user.userID}), '
                              f'Shares: {purchase.packQty}, Price: ${purchase.packPrice:.2f}, '
                              f'Bonuses removed: ${total_bonuses_removed:.2f}'
                    )
                    session.add(admin_log)

                    # Commit transaction
                    session.commit()

                    # Success message
                    await reply.edit_text(
                        f"‚úÖ Purchase {purchase_id} deleted successfully!\n\n"
                        f"üìä Deleted:\n"
                        f"‚Ä¢ Purchase: {purchase.packQty} shares of {purchase.projectName}\n"
                        f"‚Ä¢ Bonuses: {len(bonuses)} records (${total_bonuses_removed:.2f})\n"
                        f"‚Ä¢ Balance records: {len(active_balance_records)}\n\n"
                        f"üí∞ User balance restored: ${balance_adjustment:.2f}\n"
                        f"üë§ Affected user: {user.firstname} (ID: {user.userID})"
                    )

                    # Notify affected users
                    if user and balance_adjustment != 0:
                        text, buttons = await MessageTemplates.get_raw_template(
                            'purchase_deleted_notification',
                            {
                                'firstname': user.firstname,
                                'purchase_id': purchase_id,
                                'shares': purchase.packQty,
                                'project_name': purchase.projectName,
                                'balance_restored': balance_adjustment,
                                'admin_name': admin_name
                            },
                            lang=user.lang
                        )

                        notification = Notification(
                            source="admin_command",
                            text=text,
                            buttons=buttons,
                            target_type="user",
                            target_value=str(user.userID),
                            priority=2,
                            category="admin",
                            importance="high",
                            parse_mode="HTML"
                        )
                        session.add(notification)
                        session.commit()

                    logger.info(f"Purchase {purchase_id} deleted by admin {message.from_user.id}")

                except Exception as e:
                    session.rollback()
                    raise e

        except Exception as e:
            logger.error(f"Error in delpurchase confirm: {e}", exc_info=True)
            await message.reply(f"‚ùå Error deleting purchase: {str(e)}")

    async def handle_admin_command(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""

        current_state = await state.get_state()
        if current_state:
            await state.finish()
            logger.info(f"–°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state} –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

        command = message.text[1:].split()[0].lower()
        logger.info(f"Processing admin command: {command}")

        if command == "upall":
            try:
                reply = await message.reply("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é import_all
                results = await import_all(self.dp.bot)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                report = []
                for sheet_name, stats in results.items():
                    if isinstance(stats, str):  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                        report.append(f"\n‚ùå {sheet_name}: {stats}")
                    else:
                        report.append(f"\nüìä {sheet_name}:")
                        report.append(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats.total}")
                        report.append(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats.updated}")
                        report.append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {stats.added}")
                        report.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.skipped}")
                        report.append(f"–û—à–∏–±–æ–∫: {stats.errors}")

                        if stats.error_rows:
                            report.append("–û—à–∏–±–∫–∏:")
                            for row, error in stats.error_rows:
                                report.append(f"‚Ä¢ –°—Ç—Ä–æ–∫–∞ {row}: {error}")

                await reply.edit_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n" + "\n".join(report))

            except Exception as e:
                error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await message.reply(error_msg)

        elif command == "upuser":
            await self._import_sheet(message, UserImporter, "Users")

        elif command == "upconfig":
            await self.handle_upconfig(message)

        elif command == "upro":
            try:
                clear_template_cache()
                logger.info("BookStack template cache cleared")
                await self._import_sheet(message, ProjectImporter, "Projects")
                await self._import_sheet(message, OptionImporter, "Options")
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await message.reply(error_msg)

        elif command == "ut":
            try:
                reply = await message.reply("üîÑ –û–±–Ω–æ–≤–ª—è—é —à–∞–±–ª–æ–Ω—ã...")
                await MessageTemplates.load_templates()
                await reply.edit_text("‚úÖ –®–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await message.reply(error_msg)

        elif command.startswith("addtokens"):
            await self.handle_addtokens(message)

        elif command.startswith("delpurchase"):
            await self.handle_delpurchase(message)

        elif command == "testmail":
            await self.handle_testmail(message)

        elif command == "clearprojects":
            await self.handle_clearprojects(message)

        elif command == "legacy":
            try:
                reply = await message.reply("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é legacy –º–∏–≥—Ä–∞—Ü–∏—é...")

                from legacy_user_processor import legacy_processor

                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
                stats = await legacy_processor._process_legacy_users()

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
                report = f"üìä Legacy Migration Report:\n\n"
                report += f"üìã Total records: {stats.total_records}\n"
                report += f"üë§ Users found: {stats.users_found}\n"
                report += f"üë• Upliners assigned: {stats.upliners_assigned}\n"
                report += f"üìà Purchases created: {stats.purchases_created}\n"
                report += f"‚úÖ Completed: {stats.completed}\n"
                report += f"‚ùå Errors: {stats.errors}\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(stats, 'duplicate_purchases_prevented'):
                    report += f"üõ°Ô∏è Duplicate purchases prevented: {stats.duplicate_purchases_prevented}\n"

                report += "\n"

                if stats.users_found == 0 and stats.upliners_assigned == 0 and stats.purchases_created == 0:
                    report += "üîç No new legacy users found to process."
                else:
                    report += "üéØ Legacy migration processing completed!"

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if stats.errors > 0 and stats.error_details:
                    report += f"\n\n‚ùå Error details (showing first 5):\n"
                    for i, (email, error) in enumerate(stats.error_details[:5]):
                        report += f"‚Ä¢ {email}: {error}\n"

                    if len(stats.error_details) > 5:
                        report += f"... and {len(stats.error_details) - 5} more errors"

                await reply.edit_text(report)

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ legacy –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await message.reply(error_msg)

        elif command == "check":
            try:
                reply = await message.reply("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–ª–∞—Ç–µ–∂–∏...")

                with Session() as session:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                    pending_payments = session.query(Payment).filter_by(status="check").all()

                    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                    total_amount = session.query(func.sum(Payment.amount)).filter_by(status="check").scalar() or 0

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö
                    if pending_payments:
                        report = f"üí∞ –í —Å–∏—Å—Ç–µ–º–µ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ {len(pending_payments)} –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ —Å—É–º–º—É ${total_amount:.2f}"

                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                        for payment in pending_payments:
                            existing_notifications = (
                                session.query(Notification)
                                .filter(
                                    Notification.source == "payment_checker",
                                    Notification.text.like(f"%payment_id: {payment.paymentID}%")
                                )
                                .all()
                            )

                            for notif in existing_notifications:
                                session.delete(notif)

                        session.commit()

                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                        notifications_created = 0
                        for payment in pending_payments:
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                            payer = session.query(User).filter_by(userID=payment.userID).first()
                            if not payer:
                                continue

                            try:
                                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                                # –í–∞–∂–Ω–æ: —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                                from main import create_payment_check_notification
                                await create_payment_check_notification(payment, payer)
                                notifications_created += 1
                            except Exception as e:
                                logger.error(f"Error creating notification for payment {payment.paymentID}: {e}",
                                             exc_info=True)

                        report += f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {notifications_created} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
                        await reply.edit_text(report)
                    else:
                        await reply.edit_text("‚úÖ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ—Ç")

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await message.reply(error_msg)

        else:
            await message.reply(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: &{command}")


def setup_admin_commands(dp):
    dp.filters_factory.bind(AdminFilter)
    admin_commands = AdminCommands(dp)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    admin_middleware = AdminCommandsMiddleware(admin_commands)
    dp.middleware.setup(admin_middleware)

    logger.info("Admin commands initialized with middleware")